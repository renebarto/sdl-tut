Name

    NV_stream_attrib

Name Strings

    EGL_NV_stream_attrib

Contributors

    Daniel Kartch
    Miguel A. Vico
    Authors of EGL_KHR_stream_consumer_gltexture

Contacts

    TBD

Status

    Draft

Version

    Version 2 - April 20, 2016

Number

    TBD

Extension Type

    EGL display extension

Dependencies

    Requires EGL_KHR_stream
    Interacts with EGL_KHR_stream_consumer_gltexture

    This extension is written against the wording of the EGL 1.5
    specification, but may be used with older versions that support
    EGLAttribKHR.

Overview

    The KHR_stream extension was written before the introduction of
    EGLAttrib, and assumes fixed size integer attributes. Some stream
    extensions require pointer or handle attributes. This extension
    introduces new versions of several stream functions which make use
    of the new type.

    The EGL_KHR_stream_consumer_gltexture extension introduces functions
    to acquire and release stream frames, but these functions do not
    accept attribute lists. Acquire and release functionality is
    valuable to other stream consumer, but control of the behavior
    through attributes may be needed. This extension therefore adds new
    versions of these functions as well.

New Types

    None

New Functions

    EGLStreamKHR eglCreateStreamAttribNV(
        EGLDisplay       dpy,
        const EGLAttrib *attrib_list);

    EGLBoolean eglSetStreamAttribNV(
        EGLDisplay       dpy,
        EGLStreamKHR     stream,
        EGLenum          attribute,
        EGLAttrib        value);

    EGLBoolean eglQueryStreamAttribNV(
        EGLDisplay       dpy,
        EGLStreamKHR     stream,
        EGLenum          attribute,
        EGLAttrib       *value);

    EGLBoolean eglStreamConsumerAcquireAttribNV(
        EGLDisplay       dpy,
        EGLStreamKHR     stream,
        const EGLAttrib *attrib_list);

    EGLBoolean eglStreamConsumerReleaseAttribNV(
        EGLDisplay       dpy,
        EGLStreamKHR     stream,
        const EGLAttrib *attrib_list);

New Tokens

    No new tokens are defined, but the following is reused from
    EGL_KHR_stream_consumer_gltexture, and may be used in the
    <attrib_list> of eglCreateStreamAttribNV and as the <attribute>
    parameter of eglSetStreamAttribNV and eglQueryStreamAttribNV.

    EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR                0x321E

In the EGL_KHR_stream specification, replace the function declaration in
section "3.10.1 Creating an EGLStream" with

        EGLStreamKHR eglCreateStreamAttribNV(
            EGLDisplay       dpy,
            const EGLAttrib *attrib_list);

At the end of this section, add

    Streams may also be created by calling

        EGLStreamKHR eglCreateStreamKHR(
            EGLDisplay    dpy,
            const EGLint *attrib_list);

    This is equivalent to eglCreateStreamAttribNV, but only attributes
    with type EGLint may be used in <attrib_list>.

In the EGL_KHR_stream specification, replace the first paragraph of
section "3.10.4.1 Setting EGLStream Attributes" with

    Call

        EGLBoolean eglSetStreamAttribNV(
            EGLDisplay   dpy,
            EGLStreamKHR stream,
            EGLenum      attribute,
            EGLAttrib    value);

    to set the value of an attribute for an EGLStream.  The <value> is
    the new value for <attribute>.  Only read/write (rw) attributes
    with types compatible with EGLAttrib may be set with
    eglStreamSetAttribNV (see "Table 3.10.4.4 EGLStream Attributes").

At the end of this section, add

    The function

        EGLBoolean eglStreamAttribKHR(
            EGLDisplay   dpy,
            EGLStreamKHR stream,
            EGLenum      attribute,
            EGLint       value);

     is equivalent to eglSetStreamAttribNV, but may only be used for
     attributes with type EGLint.

In the EGL_KHR_stream specification, insert at the beginning of section
"3.10.4.2 Querying EGLStream Attributes"

    Call

        EGLBoolean eglQueryStreamAttribNV(
            EGLDisplay       dpy,
            EGLStreamKHR     stream,
            EGLenum          attribute,
            const EGLAttrib *value);

    to query the value of an EGLStream's attribute whose type is
    compatible with EGLAttrib, and

Add to the error list in this section

    - EGL_BAD_ATTRIBUTE is generated by eglQueryStreamAttribNV if
      <attribute> is not a valid EGLStream attribute with type
      compatible with EGLAttrib.

In the EGL_KHR_stream extension, add a new subsection 3.10.4.x at the
end of section "3.10.4 EGLStream Attributes"

    3.10.4.x EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR Attribute

    This attribute is read/write.  The default value is 0.  It
    indicates the maximum amount of time (in microseconds) that
    eglStreamConsumerAcquireAttribNV should block.  If 0 (the default)
    it will not block at all.  If negative it will block indefinitely.

In the EGL_KHR_stream extension, insert in section "3.10.2 Connecting an
EGLStream to a consumer", before subsection 3.10.2.1

    Methods for acquiring frames from a stream and releasing them back
    to a stream are dependent on the type of consumer. Some consumers
    support calling

        EGLBoolean eglStreamConsumerAcquireAttribNV(
            EGLDisplay       dpy,
            EGLStreamKHR     stream,
            const EGLAttrib *attrib_list);

    to acquire the next available frame in <stream> and

        EGLBoolean eglStreamConsumerReleaseAttribNV(
            EGLDisplay       dpy,
            EGLStreamKHR     stream,
            const EGLAttrib *attrib_list);

    to release a frame back to the stream.

    Not all consumers are required to support either or both of these
    functions. Where supported, the specific behavior is defined by the
    consumer type, and may be affected by the contents of <attrib_list>.
    <attrib_list> must either be NULL or a pointer to a list of
    name/value pairs terminated by EGL_NONE. Valid attributes are
    listed in tables 3.10.2.a and 3.10.2.b.

    Attribute                 Type        Section
    ------------------------  ----------  -------
    Currently no acquire attributes are defined

    Table 3.10.2.a EGLStream Consumer Acquire Attributes

    Attribute                 Type        Section
    ------------------------  ----------  -------
    Currently no release attributes are defined

    Table 3.10.2.b EGLStream Consumer Release Attributes

    eglStreamConsumerAcquireAttribNV will block until either the timeout
    specified by the EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR attribute of
    <stream> expires, or the value of EGL_STREAM_STATE_KHR is neither
    EGL_STREAM_STATE_EMPTY_KHR nor
    EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR (whichever comes first).

    Blocking effectively waits until a new image frame (that has never
    been consumed) is available in the EGLStream.  By default the
    timeout is zero and the function does not block.

    If one or more image frames are already acquired by the consumer
    when eglStreamConsumerAcquireAttribNV is called, the behavior is
    determined by the type of consumer.

    If successful, eglStreamConsumerAcquireAttribNV returns EGL_TRUE and
    an image frame from <stream> will be bound into the address space of
    the consumer as defined for its type.

    On failure, the function returns EGL_FALSE and generates an error.
    Additionally, image objects in the consumer's address space may
    become invalid, as determined by the consumer type.

        - EGL_BAD_STATE_KHR is generated if <stream> is not in state
          EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR or
          EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR after any timeout
          completes.

        - EGL_BAD_ACCESS is generated if the consumer of <stream> does
          not support acquiring frames through
          eglStreamConsumerAcquireAttribNV.

        - EGL_BAD_ATTRIBUTE is generated if an attribute name in
          <attrib_list> is not recognized or is not supported by the
          consumer.

        - EGL_BAD_STREAM_KHR is generated if <stream> is not a valid
          EGLStream created for <dpy>.

        - EGL_BAD_DISPLAY is generated if <dpy> is not a valid
          EGLDisplay.

        - EGL_NOT_INITIALIZED is generated if <dpy> is not initialized.

    Calling eglStreamConsumerReleaseAttribNV will release a frame held
    by the consumer back to the stream. If more than one frame is held
    by the consumer, the frame returned is determined by the consumer
    type and the contents of <attrib_list>. If no frames are currently
    held, the behavior is determined by the consumer type. Once
    returned, the consumer may no longer access the contents of the
    frame, and attempts to do so will result in errors as determined by
    the consumer type. Upon success, eglStreamConsumerReleaseAttribNV
    returns EGL_TRUE.

    If eglStreamConsumerReleaseAttribNV fails, EGL_FALSE is returned and
    an error is generated.

        - EGL_BAD_STATE_KHR is generated if <stream> is not in state
          EGL_STREAM_STATE_EMPTY_KHR,
          EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR or
          EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR.

        - EGL_BAD_ACCESS is generated if the consumer of <stream> does
          not support releasing frames through
          eglStreamConsumerReleaseAttribNV.

        - EGL_BAD_ATTRIBUTE is generated if an attribute name in
          <attrib_list> is not recognized or is not supported by the
          consumer.

        - EGL_BAD_STREAM_KHR is generated if <stream> is not a valid
          EGLStream created for <dpy>.

        - EGL_BAD_DISPLAY is generated if <dpy> is not a valid
          EGLDisplay.

        - EGL_NOT_INITIALIZED is generated if <dpy> is not initialized.

If EGL_KHR_stream_consumer_gltexture is supported, also insert

    Calling

        EGLBoolean eglStreamConsumerAcquireKHR(
            EGLDisplay   dpy,
            EGLStreamKHR stream)

    is equivalent to calling eglStreamConsumerAcquireAttribNV with
    <attrib_list> set to NULL, and calling

        EGLBoolean eglStreamConsumerReleaseKHR(
            EGLDisplay   dpy,
            EGLStreamKHR stream)

    is equivalent to calling eglStreamConsumerReleaseAttribNV with
    <attrib_list> set to NULL.

If EGL_KHR_stream_consumer_gltexture is supported, modify the language
of section "3.10.2.1 GL Texture External consumer" to reference
eglStreamConsumerAcquireAttribNV and eglStreamConsumerReleaseAttribNV,
and represent the behavior listed for eglStreamConsumerAcquireKHR and
eglStreamConsumerReleaseKHR as that specific for a GL texture consumer.

Issues

    1.  What is the appropriate naming for the new functions?

    PROPOSED: Append "Attrib" to the original functions, except for the
    function for setting attributes, where "AttribAttrib" would be
    strange, and we instead insert "Set" to distinguish it from the
    original function.

Revision History

    #2 (April 20th, 2016) Miguel A. Vico
       - Fix type of attrib_list of acquire/release functions

    #1 (February 29th, 2016) Daniel Kartch
       - Initial draft
